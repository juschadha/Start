const fs = require('fs')

module.exports.readFilePromise = function(filename) {
  return new Promise((resolve, reject) => {
    fs.readFile(filename, 'utf8', (err, data) => {
      if (err) reject(err)
      else resolve(data)
    })
  }).catch(err => {
    console.log(err)
  })
}

module.exports.getOwner = function(eventOwnerAndRepo) {
  const slicePos1 = eventOwnerAndRepo.indexOf('/')
  return eventOwnerAndRepo.slice(0, slicePos1)
}

module.exports.getRepo = function(eventOwnerAndRepo) {
  const slicePos1 = eventOwnerAndRepo.indexOf('/')
  return eventOwnerAndRepo.slice(slicePos1 + 1, eventOwnerAndRepo.length)
}

module.exports.findAviso = function(eventIssueBody) {
    let regex1 = RegExp('- \\[x\\] Aviso')
    return regex1.test(eventIssueBody)
}

module.exports.getLabels = function(octokit,eventOwner,eventRepo,eventIssueNumber)
{
  (
    octokit.issues.listLabelsOnIssue({
      owner: eventOwner,
      repo: eventRepo,
      issue_number: eventIssueNumber
    })
    .catch(err => {
      console.log(err)
    })   
  )
}

module.exports.addComment = function(octokit,eventOwner,eventRepo,eventIssueNumber)
{
    (
        octokit.issues.createComment({
            owner: eventOwner,
            repo: eventRepo,
            issue_number: eventIssueNumber,
            body:
            'Aviso is requested'
        })
        .then(
            octokit.issues.addLabels({
                owner: eventOwner,
                repo: eventRepo,
                issue_number: eventIssueNumber,
                labels: ['Aviso'] // ['Aviso']
              })
        )
    )
        .catch(err => {
            console.log(err)
        })   
}
